"0",""
"0","# Extracts names and index positions of a StringSet of aligned DNA sequences"
"0",""
"0","# raw_clones StringSet of aligned same length sequences"
"0","# allowed.unique.seq Number of filtered sequences handled as unique"
"0","# max.mismatch Allowed mismatches to identify unique sequences"
"0",""
"0",""
"0","get_unique_seqs <- function(raw_clones, allowed.unique.seq = 1, max.mismatch = 0){"
"0","  "
"0","  if (is.vector(raw_clones) != T){"
"0","    raw_clones <- as.vector(raw_clones)"
"0","  # sort all instances that only occur once"
"0","  unique_indicator <- vector(length = length(raw_clones))"
"0","  for (i in seq_along(raw_clones)) {"
"0","    # unique_indicator[i] <- sum(match(raw_clones, raw_clones[i]), na.rm = T)"
"0","    unique_indicator[i] <- sum(vcountPattern(as.character(raw_clones[i]), raw_clones,"
"0","                                             max.mismatch = max.mismatch, "
"0","                                             min.mismatch = 0)"
"0","                               , na.rm = T)    "
"0","  } #end for i"
"0","  "
"0","  # index of unique seqs"
"0","  index_unique_seq <- which("
"0","    unique_indicator == allowed.unique.seq | "
"0","      unique_indicator <= allowed.unique.seq"
"0","  )"
"0","  "
"0","  # corresponding unique names"
"0","  names_unique_seq <- names(raw_clones[index_unique_seq])"
"0","  "
"0","  return(list(index_unique_seq = index_unique_seq, "
"0","              names_unique_seq = names_unique_seq))"
"0",""
