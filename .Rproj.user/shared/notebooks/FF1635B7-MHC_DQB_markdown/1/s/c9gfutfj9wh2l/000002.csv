"0",""
"0","## calculate pairwise difference to primer sequences."
"0","## Optional, account for variable alignment length"
"0","## "
"0","Hamming.dist <- function(seq, ref, method = c(""rel"", ""abs"")) {"
"0","  method <- match.arg(method)"
"0","  # discard gaps and binding N"
"0","  gaps_seq <- which(seq %in% c(""-"", ""N""))"
"0","  gaps_ref <- which(ref %in% c(""-"", ""N""))"
"0","  gaps <- unique(c(gaps_seq, gaps_ref))"
"0","  "
"0","  seqx <- seq[-gaps]"
"0","  refx <- ref[-gaps]"
"0","  "
"0","  # estimate diff"
"0","  diff <- 0"
"0","  for (i in 1:length(seqx))  diff <- diff + ifelse(seqx[i] == refx[i], 0, 1)"
"0","  # correct for sequence length"
"0","  if (method == ""rel"") {"
"0","    diff <- "
"0","      ifelse(length(diff) > 0,diff/length(seqx), NA)"
"0","  } "
"0","  return(diff)"
"0","}# end Hamming.dist"
"0",""
"0","## Pick alleles based on hamming value threshold"
"0","simulate_hoelzel <- function(data, n = 1:length(data), bs = 999, "
"0","                             hamming = hamming_values, mismatch = 1) {"
"0","  "
"0","  hamming <- subset(hamming, x <= mismatch)"
"0","  x <- rep(n, each = bs)"
"0","  y <- lapply(x, function(temp) {"
"0","    # sample genotypes"
"0","    get <- data[sample(x = 1:length(data),"
"0","                       size = temp,"
"0","                       replace = T)] %>%"
"0","      unlist() %>%"
"0","      unique() "
"0","    # keep alleles with < mismatch differences"
"0","    keep <- get[get %in% rownames(hamming)] %>%"
"0","      length()"
"0","  }) "
"0","  "
"0","  df <- data.frame(x = x,y = unlist(y))"
"0","  df$x <- as.factor(df$x)"
"0","  return(df)"
"0","}# end simulate_hoelzel"
"0",""
"0","#' @description Summarizes data "
"0","#' @param data a data frame"
"0","#' @param measurevar character giving column name of data to summarise"
"0","#' @param groupvars character giving column names of grouping variables"
"0","#' @param na.rm boolean"
"0","#' @param conf.interval confidence interval (default 0.95)"
"0","#' @param .drop boolean"
"0","#'"
"0","#' @source"
"0","#' Taken from the R cookbook (cookbook-r.com/Manipulating_data/Summarizing_data/)"
"0","#'"
"0","summary_stats <- function(data = NULL, "
"0","                          measurevar = NULL, "
"0","                          groupvars = NULL, "
"0","                          na.rm = TRUE, "
"0","                          conf.interval = 0.95, "
"0","                          .drop = TRUE) {"
"0","  "
"0","  length2 <- function(x, na.rm = FALSE) {"
"0","    if (na.rm) {"
"0","      sum(!is.na(x))"
"0","    } else {"
"0","      length(x)"
"0","    }"
"0","  }"
"0","  # This does the summary. For each group's data frame, return a vector with"
"0","  # N, mean, and sd"
"0","  datac <- plyr::ddply(data, groupvars, .drop = .drop,"
"0","                       .fun = function(xx, col) {"
"0","                         c(N = length2(xx[[col]], na.rm = na.rm),"
"0","                           mean = mean(xx[[col]], na.rm = na.rm),"
"0","                           sd = sd(xx[[col]], na.rm = na.rm)"
"0","                         )"
"0","                       },"
"0","                       measurevar"
"0","  )"
"0","  "
"0","  # Rename the ""mean"" column"
"0","  datac <- plyr::rename(datac, c(""mean"" = measurevar))"
"0","  "
"0","  "
"0","  # Confidence interval multiplier for standard error"
"0","  # Calculate t-statistic for confidence interval:"
"0","  # e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1"
"0","  ciMult <- qt(conf.interval/2 + .5, datac$N - 1)"
"0","  datac$ci <- datac$se * ciMult"
"0","  "
"0","  return(datac)"
"0","}"
"0",""
