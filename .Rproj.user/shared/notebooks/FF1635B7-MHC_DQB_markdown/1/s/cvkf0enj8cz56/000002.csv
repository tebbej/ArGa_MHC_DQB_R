"0",""
"0","# data DNAStringSet of same length sequence alignment"
"0","# allele_name Naming of alleles in data output"
"0","# rm.unique Bool whether single sequence occurences are removed"
"0",""
"0","get_allele_info <- function(data, allele_name = ""ArGa-DQB*"", rm.unique = T){"
"0","  if (rm.unique == T) {"
"0","    unique_identifier <- get_unique_seqs(data, "
"0","                                         allowed.unique.seq = 1, "
"0","                                         max.mismatch = 0)"
"0","    "
"0","    # delete unique sequences from the data"
"0","    if (!purrr::is_empty(unique_identifier[[1]])) {"
"0","      genotype_fas <- data[-unique_identifier$index_unique_seq]"
"0","    }  "
"0","  } else {"
"0","    genotype_fas <- data"
"0","  }"
"0","  "
"0","  "
"0","  # create data set with allele sequences"
"0","  allele_seq <- unique(genotype_fas)"
"0",""
"0","  # count occurences of identified alleles in the data"
"0","  allele_count <- as.vector("
"0","    sapply(seq_along(allele_seq), function(i) "
"0","      sum(match(genotype_fas, allele_seq[[i]]), na.rm = T))"
"0","  )"
"0","  "
"0","  # create data.frame where alleles will be named after "
"0","  # its decreasing frequency in the data"
"0","  # sorted by the prior allele count"
"0","  alleles <- data.frame(seq = as.vector(allele_seq), "
"0","                        counts = allele_count,"
"0","    arrange(., desc(counts)) %>%"
"0","    mutate(frequency = (counts/sum(counts))*100) %>%"
"0","    `rownames<-`(., sapply(seq_along(allele_count), function(i) "
"0","      paste0(allele_name,i))) %>%"
"0","    rownames_to_column(""name"")"
"0","  "
"0","  out = list(alleles = alleles, "
"0","             genotype_fas = genotype_fas)"
"0","  "
"0","  return(out)"
"0","} # end get_allele_info"
"0",""
